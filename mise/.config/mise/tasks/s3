#!/usr/bin/env bun
import { $, S3Client, type S3File } from "bun";
import { hideBin } from "yargs/helpers";
import yargs from "yargs/yargs";

function createClient(file: string) {
	const url = new URL(file);
	const bucket = url.pathname.split("/")[1];
	const endpoint = `https://${url.hostname}`;

	return new S3Client({
		accessKeyId: Bun.env.AWS_ACCESS_KEY_ID,
		secretAccessKey: Bun.env.AWS_SECRET_ACCESS_KEY,
		region: Bun.env.AWS_DEFAULT_REGION,
		bucket,
		endpoint,
	});
}

function objectPath(file: string) {
	return new URL(file).pathname.split("/").slice(2).join("/");
}

yargs(hideBin(process.argv))
	.command(
		"cat file",
		"cat file",
		(yargs) => {
			yargs.positional("file", { describe: "file path" });
			yargs.option("encrypt", {
				alias: "e",
				describe: "file is encrypted",
			});
		},
		async (args) => {
			const client = createClient(args.file);
			const path = objectPath(args.file);
			const s3file: S3File = client.file(path);
			const text = await s3file.text();
			Bun.stdout.write(text);
		},
	)
	.command(
		"pull file [dest]",
		"pull file [dest]",
		(yargs) => {
			yargs.positional("file", {
				describe: "file path",
			});
			yargs.option("encrypt", {
				alias: "e",
				describe: "file is encrypted",
			});
		},
		async (args) => {
			const client = createClient(args.file);
			const path = objectPath(args.file);
			const s3file: S3File = client.file(path);
			const name = args.dest ?? path;
			await Bun.write(name, s3file);
		},
	)
	.command(
		"push file [dest]",
		"push file [dest]",
		(yargs) => {
			yargs.positional("file", {
				describe: "file path",
			});
			yargs.option("encrypt", {
				alias: "e",
				describe: "encrypt the file",
			});
		},
		async (args) => {
			const file = Bun.file(args.file);
			const arrbuf = await file.arrayBuffer();
			const buffer = Buffer.from(arrbuf);

			if (args.encrypt) {
				// use openssl to encrypt the file
				// openssl enc -aes-256-cbc -salt -pbkdf2 -in $1 -out $1.enc $2
			}

			// const client = createClient(args.dest);
			// const path = objectPath(args.dest);
			// const s3file: S3File = client.file(path);

			// await s3file.write(buffer);
		},
	)
	.strictCommands()
	.demandCommand(1)
	.parse();
